큰클에서본다면자바에서의인터페이스개념도사전적의미와비슷하다
상호간 통신을 위해서는 규격이 중요하다 일본이 110볼트를 사용합니다
예를들면일본의백십볼트가전제품을 한국으로 가지고 와도 규격이 맞지 않으므로
사용할 수 없다 

인터페이스 = 규격

메소드 = 오버로딩 = 생성자

오버라이딩 = 클래스 = 상속

일본의 가전기업이 그럼에도 불구하고 한국에서 전자제품을 팔고 싶다면 한국내 220v 규격을 지켜서
만들어야만 팔 수 있다

이러한 규격을 인터페이스라 할 수 있고, 인터페이스는 하나의 표준화를 제공하는 것이라 할 수 있다

자바에서 인터페이스를 공부할 때는 추상클래스와 매우매우 비슷하여 헷갈리다

abstract class sibal{
	void cry();
}

public class cow {
	void cry("야옹");
}

추상 클래스와 거의 비슷하다 그러나 그 추상화 정도가 더 높다(더 엄격하다).
따라서, 일반 메서드 멤버 필드(변수)를 가질 수 없다. 
그럼 무엇을 가질 수 있는가 

상수
상수
상수

인터페이스 = 상수
인터페이스 = 상수
인터페이스 = 상수
인터페이스 = 상수
인터페이스 = 상수

이러한 점들이 추상 클래스와 인터페이스간 가장 큰 차이점 중 하나이다. -> 더 있다.
자바에서의 인터페이스 문법?
표준화 및 규격을 인터페이스로 제공. 
따라서 어떤 클래스가 해당 인터페이스를 사용(상속)한다면 인터페이스에 선언되어져 있는
메서드를 구현해야 한다. 
인터페이스는 class 키워드를 사용하지 않고 별도의 interface 키워드를 사용한다
class -> extends // interface -> extends(x), implements(o)
class extends interface implements
class extends interface implements
interface implements
추상 클래스와 같이 메서드의 구체적인 내용은 기술되어져 있지 않으므로 인터페이스를 상속받은
클래스에서 재정의(오버라이딩)하여 사용해야 한다.

상속 vs 구현

클래스와 인터페이스 이 둘의 가장 큰 차이점 하나는 '상속' 이다. -> a, b
그래서 우선은 사실은 코드를 보면서 이런 부분이 다시 이렇게 정리가 되면서
코드를 반드시 실습을 통해서 봐야 한다. 너무 지식을 모르고 바로 코드로들어가는것보다
인터페이스는 말랑말랑하게 해줘야한다 머리는 
자바에서 클래스는 '단일 상속' 만 가능하지만, 인터페이스는 '다중 상속'이 가능하다!
그러나 인터페이스에서는 상속이라는 표현을 쓰지않고 extends(더욱더 살을 붙여 부모로부터 받아
자식이 더 확장해 사용할 수 있다)

인터페이스는 '구현' 부모가 가진 것을 그대로 받아(아직 실용성이 없는) 그것을 그저 구현해서
(원래의 기능에서 벗어나지 않음) 그것을 사용한다

extends 가능성있음
implement 가능성없음 키워드를 사용하여 다중 상속을 구현한다.

자바의 인터페이스 문법을 예제 코드로 구현해보시오
이 문제는 자바 문법중 인터페이스에 대한 개념과 어떻게 사용하는지에 대해서 아는지를 묻는 문제이다

public class fuckyou implements fuck
A,B 콤마로 분류해서 여러개의 인터페이스를 상속받았다면 같은 클래스라고 생각해서
여러개의 클래스로부터 상속을 받는 효과 A, B 전부 다중상속을 받을 수 있다
클래스로부터 extends를 받아 상속받을 수 있고 부모로부터 A,B를 여러개를 상속받아서 구현할수있고
여러 개 다 받아서 구현화 할 수 있다는 거죠 뭐 이렇게 동시에 다가능

//[1]인터페이스
//추상 클래스와 거의 비슷하나 그 추상화 정도가 더 높다(더 엄격). -> 일반 메서드나 멤버 필드(변수)를
가질 수 없다. 그대로가야함(일종의 설계도 개념)
//추상클래스 따라서, 어떤 클래스가 해당 인터페이스를 사용(상속)한다면 인터페이스에 선언되어져 있는 메서드를 구현
//인터페이스는 interface 키워드를 사용.
//추상클래스와 같이 메서드의 구체적인 내용은 기술되어져 있지 않으므로 인터페이스를 상속받은 클래스에서 재정의오버라이딩되어져사용한다

//[2]상속
클래스는 단일 상속만 가능 인터페이스는 다중 상속이 가능 이것이 가장 큰 차이점!
//class-> extends키워드를 사용 가능 interface->implements 키워드를 사용 A,B 콤마로 분리(다중상속의구현)
//즉, 이를 이용하면 여러 개의 인터페이스로부터 메서드를 받아올 수 있는거죠(다중상속의구현)
//[3]장점 인터페이스를 이용하면 메서드의 추상적인 '선언'과 그 메서드들을 구체적인 '구현' 부분을 분리시킨다
//하청을 주는 대기업(갑)은 하청업체(을)에 인터페이스만 제공 -> 각 하청업체(을)들이 이를 준수하여
(=상속 받아) 개발.


선언과 구현을 분리?
선언과 구현을 분리?
110 달랬더니 220를 쓰고 있는데 전자제품을 만든 기업들이 있는데 예를 들어 많은 외국계 기업에서
제품을 만들어 팔고싶어한다 이때 표준화된 규격을 지켜 제품을 납품해야 하는데 이러한 식의
interface를 제공하지 않으면 표준화된 규격 가이드라인이 없다면 A, B, CCD 내수판매용으로 만드는것
처럼 110으로 한다 근데 왜 220으로 안했죠? 

//[4]우선순위
ㅈㅈㅈㅈㅈㅈㅈㅈㅈㅈㅈㅈㅈ조선
클래스로부터 상속을 받고 인터페이스로부터 상속을 받을 경우 (둘 다 ) 클래스가 우선순위를 획득
상속을 받는 extends 키워드와 구현을 하는 implements 키워드가 동시에 쓰일 때
extends 키워드가 항상 먼저 쓰인다.
예시) class Student extends Person implements A, B 구체적인 선언이 없는 어떠한 추상 메서드

----------------------------------------------------------

public class Java100_oop_Interface2 {
	public static void main(String[] args) {
	
	//[1]객체생성
	}
}

public class Person(오야붕){

}

public 인터페이스(부모)

public 인터페이스(부모)

Student 클래스(자식)

메인 클래스(메인 메서드가 포함)


public String getName();
public static void setName(int adsfa String asdfa);

-------------------부모가몇이야----------------------------

class Person {
//Field
String name;
int age;
int weigth;

interface Allowance{

}


interface Train{

}


-------------------부모가몇이야----------------------------

//Constructor
Person() {}
Person(String name, int age, int weigth) {
	this.name = name;
	this.age = age;
	this.weigth = weight;
	}

//Method
void wash() {System.out.println("씻다.");}
void study() {System.out.println("공부하다.");}
void sleep() {System.out.println("죽다.");}
}

class Student extends Person{

}

class Student extends Person implements Allowance, Train {

}

public class Java100_oop_Interface3 {

}



















큰클에서본다면자바에서의인터페이스개념도사전적의미와비슷하다
상호간 통신을 위해서는 규격이 중요하다 일본이 110볼트를 사용합니다
예를들면일본의백십볼트가전제품을 한국으로 가지고 와도 규격이 맞지 않으므로
사용할 수 없다 

인터페이스 = 규격

메소드 = 오버로딩 = 생성자

오버라이딩 = 클래스 = 상속

일본의 가전기업이 그럼에도 불구하고 한국에서 전자제품을 팔고 싶다면 한국내 220v 규격을 지켜서
만들어야만 팔 수 있다

이러한 규격을 인터페이스라 할 수 있고, 인터페이스는 하나의 표준화를 제공하는 것이라 할 수 있다

자바에서 인터페이스를 공부할 때는 추상클래스와 매우매우 비슷하여 헷갈리다

abstract class sibal{
	void cry();
}

public class cow {
	void cry("야옹");
}

추상 클래스와 거의 비슷하다 그러나 그 추상화 정도가 더 높다(더 엄격하다).
따라서, 일반 메서드 멤버 필드(변수)를 가질 수 없다. 
그럼 무엇을 가질 수 있는가 

상수
상수
상수

인터페이스 = 상수
인터페이스 = 상수
인터페이스 = 상수
인터페이스 = 상수
인터페이스 = 상수

이러한 점들이 추상 클래스와 인터페이스간 가장 큰 차이점 중 하나이다. -> 더 있다.
자바에서의 인터페이스 문법?
표준화 및 규격을 인터페이스로 제공. 
따라서 어떤 클래스가 해당 인터페이스를 사용(상속)한다면 인터페이스에 선언되어져 있는
메서드를 구현해야 한다. 
인터페이스는 class 키워드를 사용하지 않고 별도의 interface 키워드를 사용한다
class -> extends // interface -> extends(x), implements(o)
class extends interface implements
class extends interface implements
interface implements
추상 클래스와 같이 메서드의 구체적인 내용은 기술되어져 있지 않으므로 인터페이스를 상속받은
클래스에서 재정의(오버라이딩)하여 사용해야 한다.

상속 vs 구현

클래스와 인터페이스 이 둘의 가장 큰 차이점 하나는 '상속' 이다. -> a, b
그래서 우선은 사실은 코드를 보면서 이런 부분이 다시 이렇게 정리가 되면서
코드를 반드시 실습을 통해서 봐야 한다. 너무 지식을 모르고 바로 코드로들어가는것보다
인터페이스는 말랑말랑하게 해줘야한다 머리는 
자바에서 클래스는 '단일 상속' 만 가능하지만, 인터페이스는 '다중 상속'이 가능하다!
그러나 인터페이스에서는 상속이라는 표현을 쓰지않고 extends(더욱더 살을 붙여 부모로부터 받아
자식이 더 확장해 사용할 수 있다)

인터페이스는 '구현' 부모가 가진 것을 그대로 받아(아직 실용성이 없는) 그것을 그저 구현해서
(원래의 기능에서 벗어나지 않음) 그것을 사용한다

extends 가능성있음
implement 가능성없음 키워드를 사용하여 다중 상속을 구현한다.

자바의 인터페이스 문법을 예제 코드로 구현해보시오
이 문제는 자바 문법중 인터페이스에 대한 개념과 어떻게 사용하는지에 대해서 아는지를 묻는 문제이다

public class fuckyou implements fuck
A,B 콤마로 분류해서 여러개의 인터페이스를 상속받았다면 같은 클래스라고 생각해서
여러개의 클래스로부터 상속을 받는 효과 A, B 전부 다중상속을 받을 수 있다
클래스로부터 extends를 받아 상속받을 수 있고 부모로부터 A,B를 여러개를 상속받아서 구현할수있고
여러 개 다 받아서 구현화 할 수 있다는 거죠 뭐 이렇게 동시에 다가능

//[1]인터페이스
//추상 클래스와 거의 비슷하나 그 추상화 정도가 더 높다(더 엄격). -> 일반 메서드나 멤버 필드(변수)를
가질 수 없다. 그대로가야함(일종의 설계도 개념)
//추상클래스 따라서, 어떤 클래스가 해당 인터페이스를 사용(상속)한다면 인터페이스에 선언되어져 있는 메서드를 구현
//인터페이스는 interface 키워드를 사용.
//추상클래스와 같이 메서드의 구체적인 내용은 기술되어져 있지 않으므로 인터페이스를 상속받은 클래스에서 재정의오버라이딩되어져사용한다

//[2]상속
클래스는 단일 상속만 가능 인터페이스는 다중 상속이 가능 이것이 가장 큰 차이점!
//class-> extends키워드를 사용 가능 interface->implements 키워드를 사용 A,B 콤마로 분리(다중상속의구현)
//즉, 이를 이용하면 여러 개의 인터페이스로부터 메서드를 받아올 수 있는거죠(다중상속의구현)
//[3]장점 인터페이스를 이용하면 메서드의 추상적인 '선언'과 그 메서드들을 구체적인 '구현' 부분을 분리시킨다
//하청을 주는 대기업(갑)은 하청업체(을)에 인터페이스만 제공 -> 각 하청업체(을)들이 이를 준수하여
(=상속 받아) 개발.


선언과 구현을 분리?
선언과 구현을 분리?
110 달랬더니 220를 쓰고 있는데 전자제품을 만든 기업들이 있는데 예를 들어 많은 외국계 기업에서
제품을 만들어 팔고싶어한다 이때 표준화된 규격을 지켜 제품을 납품해야 하는데 이러한 식의
interface를 제공하지 않으면 표준화된 규격 가이드라인이 없다면 A, B, CCD 내수판매용으로 만드는것
처럼 110으로 한다 근데 왜 220으로 안했죠? 

//[4]우선순위
ㅈㅈㅈㅈㅈㅈㅈㅈㅈㅈㅈㅈㅈ조선
클래스로부터 상속을 받고 인터페이스로부터 상속을 받을 경우 (둘 다 ) 클래스가 우선순위를 획득
상속을 받는 extends 키워드와 구현을 하는 implements 키워드가 동시에 쓰일 때
extends 키워드가 항상 먼저 쓰인다.
예시) class Student extends Person implements A, B 구체적인 선언이 없는 어떠한 추상 메서드

----------------------------------------------------------

public class Java100_oop_Interface2 {
	public static void main(String[] args) {
	
	//[1]객체생성
	}
}

public class Person(오야붕){

}

public 인터페이스(부모)

public 인터페이스(부모)

Student 클래스(자식)

메인 클래스(메인 메서드가 포함)


public String getName();
public static void setName(int adsfa String asdfa);

-------------------부모가몇이야----------------------------

class Person {
//Field
String name;
int age;
int weigth;

interface Allowance{

}


interface Train{

}


-------------------부모가몇이야----------------------------

//Constructor
Person() {}
Person(String name, int age, int weigth) {
	this.name = name;
	this.age = age;
	this.weigth = weight;
	}

//Method
void wash() {System.out.println("씻다.");}
void study() {System.out.println("공부하다.");}
void sleep() {System.out.println("죽다.");}
}

class Student extends Person{

}

class Student extends Person implements Allowance, Train {
//Field
//Constructor
Student(){}
Student(String naem. int age, int weight){
super(name, age, weight);
super(name, age, weight);
this.age = age;
this}
}
public void in(int price, String name) { System.out.prinf(“%s에게서 %d원 용돈을 받았습니다.”,);
public void out(int price, String name) { System.out.printf(“%d원 금액을 지출했습니다. 지출용도--> 편의점”,[지출용도-->편의점],price, name;}
public void train(int training_pay, String name){System.out.printf(“[%d->%s입금완료]”,);}

public class Java100_oop_Interface3 {
//[1]객체 생성
Student s1 = new Student(“홍길동”,20,85);


}

추상클래스보다 인터페이스가 더 엄격하다
예를 들면 인터페이스는 안에 일반 메서드를 작성할 수 없지
abstract
void in();
void out();

interface
void in(int price, String name);
오류

abstract void in(int price, String name);
abstract void out(int price, String name);
Abstract method























