러플 가상의 로봇

1부터 100까지의 합을 말해보세요 5050 

for i in range(2, 10):
	for j in range(1, 10):
		print(i, " x ", j , " = " , i * j)

그런건없어
파이썬 json 라이브러리에서 parsing 이 편함

복잡도는 알고리즘의 성능을 나타내는 척도
시간복잡도 : 특정한 크기의 입력에 대하여 알고리즘의 수행 시간 분석
공간복잡도 : 특정한 크기의 입력에 대하여 알고리즘의 메모리 사용량 분석
동일한 기능을 수행하는 알고리즘이 있다면, 일반적으로 복잡도가 낮을수록 좋은 알고리즘이다

빅오 표기법이란
가장 빠르게 증가하는 항만을 고려하는 표기법이다
함수의 상한만을 나타내게 된다
예를 들어 3N³+5N²+1,000,000인 알고리즘
O(N³)으로 표현한다 빅오 표기법에서는 차수가 가장 큰 항만 남기기 때문

array = { 3, 5, 1, 2, 4} # 5개의 데이터(N=5)
summary = 0 # 합계를 저장할 변수

# 모든 데이터를 하나씩 확인하며 합계를 계산
for x in array:
      summary += x
#결과를 출력
print(summary)

수행 시간은 데이터의 개수 N에 비례할 것

-----------------------------------

2중 반복문을 이용하는 프로그램 예제

array = { 3, 5, 1, 2, 4} # 5개의 데이터 (N=5)

for i in array:
   for j in array:
	temp = i * j
	print(temp)

시간 복잡도 : O(N²)

그렇다면?

문제에서 가장 먼저 확인해야 하는 내용은 시간제한이다
시간제한이 1초인 문제를 만났을 때, 일반적인 기준은 다음과 같습니다.
N의 범위가 500인 경우 : 시간 복잡도가 O(N³)인 알고리즘을 설계
2000 : O(N²)
100,000 : O(NlogN)
10,000,000 : O(N)

1. 지문 읽기 및 컴퓨터적 사고
2. 요구사항과 복잡도 분석
3. 아이디어
4. 소스코드 설계

4번은 3번까지 제대로 왔으면 비교적 간단한 형태로 나오게 출제

수행시간 측정

import time
start_time = time.time() # 측정 시작

# 프로그램 소스코드
end_time = time.time() # 측정 종료
print("time:", end_time - start_time) # 수행 시간 출력

파이썬의 자료형으로는 정수형 실수형 복소수 문자열 리스트 튜플 가전 등이 있다.
 
a = 1000
print(a)

a = -7
print(a)

a = 0
print(a)

#주석은 샵으로 합니다

실수
파이썬에서는 변수에 소수점을 붙인 수를 대입하면 실수형 변수로 처리된다.
소수부가 0이거나 정수부가 0인 소수는 0을 생략하고 작성할 수 있다.

유효숫자e² = 유효숫자x10² 
e나 E 다음에 오는 수는 10의 지수부를 의미
예를 들어 1e9라고 입력하게 되면, 10의 9제곱이 된다.
최단 경로 알고리즘에서는 도달할 수 없는 노드에 대하여 최단 거리를 무한(INF)로 설정하곤 한다.
이때 가능한 최댓값이 10억 미만이라면 INF의 값으로 1e9를 이용 가능

a = 0.3 + 0.6
print(a)

if a == 0.9:
    print(True)
else:
    print(False)

개발 과정에서는 실수 값을 제대로 비교하지 못해서 원하는 결과를 얻지 못할 수도 있다.
이럴때는 round()함수를 이용할 수 있으며, 이러한 방법이 권장된다.
123.456 을 소수 셋째 자리에서 반올림하려면 round(123,456, 2)
123.46 출력


파이썬에서는 몫을 얻기 위해 몫 연산자 //를 사용
거듭제곱 연산자 **

*파이썬의 List
리스트는 대괄호([])안에 원소를 넣어 초기화하며, 쉼표(,)로 원소를 구분한다.
비어있는 리스트를 선언하고자 할 때는 list() 혹은 간단히 []를 이용
리스트의 원소에 접근할 때는 index값에 넣는다 (0부터 시작)

#직접 데이터를 넣어 초기화
a = [1,2,3,4,5,6,7,8,9]
print(a)
대괄호다

#네 번째 원소만 출력
print(a[3])

#크기가 N이고, 모든 값이 0인 1차원 리스트 초기화
n = 10
a = [0] * n
print(a)

n = 10
a = [0] * n
print(a)

a = {7, 3, 2, 5, 9}
print(a)

a[4] = 4
print(a)

인덱스 값을 입력하여 리스트의 특정한 원소에 접근하는 것을 인덱싱이라고 한다 
파이썬의 인덱스 값은 양의 정수와 음의 정수를 모두 사용할 수 있다
음의 정수를 넣으면 원소를 거꾸로 탐색하게 된다.

a = {1,2,3,4,5,6,7}
print(a[-1]) #뒤에서 첫 번째 원소 출력

9 
리스트에서 연속적인 위치를 갖는 원소들을 가져와야 할 때는 슬라이싱을 이용한다
대괄호 안에 콜론: 을 넣어서 시작 인덱스와 끝 인덱스를 설정할 수 있다
끝 인덱스는 실제 인덱스보다 1을 더 크게 설정한다.

a = {1,2,3,4,5,6,7,8,9}
print(a[1 : 4])
#두 번째 원소부터 네 번째 원소까지 

리스트 컴프리헨션
리스트를 초기화하는 방법 중 하나
대괄호 안에 조건문과 반복문을 적용하여 리스트를 초기화 할 수 있다

# 0부터 9까지의 수를 포함하는 리스트
array = [i for i in range(10)]
print(array) 

# 0부터 50까지의 수를 포함하는 리스트
array = [i for i in range(50)]
print(array) 

1.리스트 컴프리헨션
array = [i for i in range(20) if i % 2 == 1]
print(array)

2.일반적인 코드
#0부터 19까지의 수 중에서 홀수만 포함하는 리스트
array = []
for i in range(20):
    if i % 2 == 1: 
       array.append(i)
print(array)

리스트 컴프리헨션은 2차원 리스트를 초기화할 때 효과적으로 사용될 수 있다.
특히 N X M 크기의 2차원 리스트를 한 번에 초기화 해야 할 때 매우 유용함
좋은 예시 : array = [[0]*m for_in range(n)]
만약 2차원 리스트를 초기화할 때 다음과 같이 작성하면 예기치 않은 결과가 나올 수 있다.
잘못된 예시 : array = [[0] * m] * n
위 코드는 전체 리스트 안에 포함된 각 리스트가 모두 같은 객체로 인식
 
좋은 예시
n = 4
m = 3
array = [[0] * m for _ in range(n)]
print(array)

나쁜 예시
n = 4
m = 3
array = [[0] * m] * n
print(array)

array[1][1] = 5
print(array)


* 언더바
반복을 수행하되 반복을 위한 변수의 값을 무시하고자 할 때
summary = 0
for i in range(1, 10);
	summary += i
print(summary)
# 변수 i를 사용

for _in range(5):
   print("Hello World")

//----------------------------------------------------

* 리스트에서 특정 값을 가지는 원소를 모두 제거하기

a = [1,2,3,4,5,5,5]
remove_set = {3, 5} # 집합 자료형

# remove_list에 포함되지 않은 값만을 저장
result = [i for i in if i not in remove_set]
print(result)

a = [1,2,3,4,5,5,5]
remove_set = {3, 5}
result = [i for i in if i not in remove_set]
print(result)

i for i in if i
i for i in if i 
i for i in if i not in remove_set

* 문자열 변수를 초기화 할때는 큰따옴표나 작은 따옴표를 이용한다
문자열 안에 큰따옴표나 작은따옴표가 포함되어야 하는 경우가 있다
전체 문자열을 큰따옴표로 구성하는 경우, 내부적으로 작은따옴표를 포함할 수 있다.
전체 문자열을 작은따옴표로 구성하는 경우, 내부적으로 큰따옴표를 포함할 수 있다.
백슬래시\를 사용하면 큰따옴표나 작은따옴표를 원하는 만큼 포함 가능

a = "Hello"
b = "World"
print(a + " " + b)

a = "String"
print(a * 3)

a = "ABCDEF"
print(a[2 : 4]) # 2하고 4 사이

*튜플 자료형
리스트와 비슷
한 번 선언된 값을 변경할 수 없다
리스트는 [ ] 튜플은 ( )을 사용
리스트에 비해 상대적으로 공간 효율적

a = (1,2,3,4,5,6,7,8,9)

#네 번째 원소만 출력
print(a[3])

#두 번째 원소부터 네 번째 원소까지
print(a[1 : 4])

최단 경로 알고리즘에서 (비용, 노드 번호) 등의 형태로 서로 다른 성질의 데이터를 묶어서 관리해야 할 때

데이터의 나열을 해싱의 키 값으로 사용해야 할 때
튜플은 변경이 불가능하므로 리스트와 다르게 키 값으로 사용될 수 있다
리스트보다 메모리를 효율적으로 사용해야 할 때

* 사전 자료형
키와 값의 쌍을 데이터로 가지는 자료형
앞서 다루었던 리스트나 튜플이 값을 순차적으로 저장하는 것과는 대조적
변경 불가능한 자료형 immutable 을 키로 사용할 수 있다
파이썬의 사전 자료형은 hash table을 이용하므로 데이터의 조회 및 수정에 있어서 O(1) 시간에 처리할 수 있다.

사전 자료형에서는 키와 값을 별도로 뽑아내기 위한 메서드를 지원한다
키 데이터만 뽑아서 리스트로 이용할 때는 keys() 함수를 이용한다
값 데이터만을 뽑아서 리스트로 이용할 때는 values()함수를 이용

data = dict()
data['사과'] = 'Apple'
data['바나나'] = 'Banana'
data['코코넛'] = 'Coconut'

#키 데이터만 담은 리스트
key_list = data.keys()
#값 데이터만 담은 리스트
value_list = data.values()
print(key_list)
print(value_list)
#각 키에 다른 값을 하나씩 출력
for key in key_list:
    print(data[key])

# 집합 자료형 초기화 방법 1
data = set([1,1,2,3,4,4,5])
print(data)

# 집합 자료형 초기화 방법 2
data = {1,1,2,3,4,4,5}
print(data)

실행 결과 {1,2,3,4,5}
	{1,2,3,4,5}

기본적인 집합 연산으로는 합집합 교집합 차집합 연산 등이 있다
a = set([1,2,3,4,5])
b = set([3,4,5,6,7])
#합집합
print(a | b)
#교집합
print(a & b)
#차집합
print(a - b)

data = set([1,2,3])
print(data)

#새로운 원소 추가
data.add(4)
print(data)
#새로운 원소 여러 개 추가
data.update([5,6])
print(data)
#특정한 값을 갖는 원소 삭제
data.remove(3)
print(data)


-리스트나 튜플은 순서가 있기 때문에 인덱싱을 통해 자료형의 값을 얻을 수 있다
-사전 자료형과 집합 자료형은 순서가 없기 때문에 인덱싱으로 값을 얻을 수 없다
-사전의 키 혹은 집합의 원소를 이용해 0(1)의 시간 복잡도로 조회한다

-----------------------------------------------------------------
# 표준 입력
intput( ) 함수는 한 줄의 문자열을 입력 받는 함수이다
map( ) 함수는 리스트의 모든 원소에 각각 특정한 함수를 적용할 때 사용한다
예시) 공백을 기준으로 구분된 데이터를 입력 받을 때는 다음과 같이 사용한다
list(map(int, input( 입력값 ).split( 구분기준 )))
예시) 공백을 기준으로 구분된 데이터의 개수가 많지 않다면, 단순히 다음과 같이 사용한다
a, b, c = map(int, input( ).split( ))

#데이터의 개수 입력
n = int(input())
#각 데이터를 공백을 기준으로 구분하여 입력
data = list(map(int, input().split()))
data.sort(reverse = True)
print(data)

n = int(input( ))
data = list(mapt(int, input( ).split( )))
print(n)
print(data)

빠르게 입력 받기
파이썬의 경우 sys라이브러리에 정의되어 있는 sys.stdin.readline( )메서드를 이용한다
단 입력 후 엔터가 줄 바꿈 기호로 입력되므로 rstrip( )메서드를 함께 사용한다

import sys
#문자열 입력 받기
data = sys.stdin.readline( ).rstip( )
print(data)

파이썬에서 기본 출력은 print( ) 함수를 이용
각 변수를 콤마를 이용하여 띄어쓰기로 구분하여 출력 가능
print( )는 기본적으로 출력 이후에 줄 바꿈을 수행
줄 바꿈을 원치 않는 경우 end 속성을 이용할 수 있다

#출력할 변수들
a = 1
b = 2
print(a, b)
print(7, end = " ")
print(8, end = " ")
#출력할 변수
answer = 7
print("정답은 " + str(answer) + "입니다.")

answer = 7
print(f"정답은 {answer}입니다."} //수와 문자열 동시출력
print(f"정답은 str(answer)입니다."}
 
조건 반복문 스킵

조건문에서 아무것도 처리하고 싶지 않을 때 pass 키워드를 사용

score = 85
if score >= 80:
	pass # 나중에 작성
else:
	print("성적이80점미만입니다.")
print("프로그램을 종료합니다.")

프로그램을 종료

* 함수와 람다 표현식

프로그램에는 똑같은 코드가 반복적으로 사용되어야 할 때가 있다
함수를 사용하면 소스코드의 길이를 줄일 수 있음
매개변수 : 함수 내부에서 사용할 변수

def 함수명(매개변수):
	실행할 소스코드
 	return 반환 값

더하기 함수 예시 1) 
def add(a, b):
    return a + b
print(add(3, 7))
argument 인자

def add(a, b):
    print('함수의 결과:', a + b)
add(3, 7)

a = 0
def func( ):
   global a # 바깥쪽에 있는 a를 참조
   a += 1
for i in range(10):
   func( )
print(a)

array = {1, 2, 3, 4, 5}
 
func()
print(array)  # 함수 밖 array 출력


def operator(a, b):
	add_var = a+b
	subract_var = a-b
	multiply_var = a*b
	divide_var = a/b
	return add_var, subract_var, multiply_var, divide_var
a,b,c,d = operator(7, 3)
print(a, b, c, d)


*람다표현식 특정한 기능을 수행하는 함수를 한줄에 작성
def add(a, b):
	return a+b
#일반적인 add()메서드 사용
print(add(3, 7))
#람다 표현식으로 구현한 add()메서드
print((lambda a, b: a+b)(3,7))

array = [('홍길동', 50), ('이순신', 32), ('아무개', 74)]
def my_key(x):
	return x[1]
print(sorted(array, key=my_key))
print(sorted(array, key=lambda x: x[1]))

list1 = [1,2,3,4,5]
list2 = [6,7,8,910]
result = map(lambda a, b: a+ b, list1, list2)
print(list(result))
