npm i express morgan nodemon ejs bady-parser dotenv mongoose axios



System.out.printf(|\\_/|  /n)
System.out.printf(|q p|   /} /n)
System.out.printf(( 0 )\"\"\"\\ /n)
System.out.printf(|\"^\"`    | /n)
System.out.printf(||_/=\\\\__| /n)


System.out.println("|\\_/|");
		System.out.println("|q p|   /}");
		System.out.println("( 0 )\"\"\"\\");
		System.out.println("|\"^\"`    |");
		System.out.println("||_/=\\\\__|");

|\_/|
|q p|   /}
( 0 )"""\
|"^"`    |
||_/=\\__|


import java.util.Scanner;
public class Main{
	public static void main(String[] args){
		Scanner sc = new Scanner(System.in);
		int n = sc.nextInt();
int index = 1;
if(n==1) system.out.print(1);
while(true){
	if((n-1)-index*6 <=0){
		System.out.print(index+1);
		break;
	}
	else index++;
}

	}
}

import java.util.Scanner;
 
public class Main {
	public static void main(String[] args) {
 
		Scanner in = new Scanner(System.in);
 
		int N = in.nextInt();
		int count = 1; // 겹 수(최소 루트)
		int range = 2;	// 범위 (최솟값 기준) 
 
		if (N == 1) {
			System.out.print(1);
		}
 
		else {
			while (range <= N) {	// 범위가 N보다 커지기 직전까지 반복 
				range = range + (6 * count);	// 다음 범위의 최솟값으로 초기화 
				count++;	// count 1 증가 
			}
			System.out.print(count);
		}
	}
}

-----------------------------------------------------------

*백준 2292

n-1에 6을 몇번 쳐빼야 0이하의 수가 나오는가 // 몇번쳐빼나 = int index

ex 7번을 골랐다

7-1 = 6

6-6 = 0 // 6을 한번만 빼주면 0이나옴

index+1 즉 2번의 방을 움직여야 한다는 결론이 나옴

system.out.print(index+1);


int n = sc.nextInt();
int index = 1;
if(n==1) system.out.print(1);
while(true){
	if((n-1)-index*6 <=0){
		System.out.print(index+1);
		break;
	}
	else index++;
}

-----------------------------------------------------------

import java.util.Scanner;
public class Main{
	public static void main(String[] args){
	Scanner sc = new Scanner(System.in);
	int suger = sc.nextInt();
	int cnt5 = suger/5;
	int cnt6 = suger%5;
	if(cnt6==0) System.out.print(cnt5);
	elseif(cnt6==3) System.out.print(cnt5+1);
	else System.out.print(-1);
	}
}
--------------------------------------------

import java.io.InputStreaReader;
import java.io.BufferedReader;
import java.io.IOException;

public class Main{

	public static void main(String[] args) throws IOException {

	BufferedReader br = new BufferedReader(new InputStreamReader(System.in);
int N = Integer.parseInt(br.readLine());

System.out.print(N)

-------------------------------------------------
* 백준 4153번
과거 이집트인들은 각 변들의 길이가 3, 4, 5인 삼각형이 직각 삼각형인것을 알아냈다. 주어진 세변의 길이로 삼각형이 직각인지 아닌지 구분하시오.

내 풀이:

int a,b,c;

int genuine = math.max(a,b,c);

if genuine == a
	if a*a == b*b+c*c
		System.out.print("right");
	else if genuine == b
		if b*b == b*b+c*c
		System.out.print("right");
		else
		System.out.print("wrong");
	else if genuine == c
		if c*c == a*a+b*b
			System.out.print("right");
		else
		System.out.print("wrong");


math max로 제일 큰 값 지정

근데 할 필요 없었음

import java.util.Scanner;
 
public class Main {
	public static void main(String[] args) {
    
        Scanner in = new Scanner(System.in);
       
        
        while(true) {
        	
        	int x = in.nextInt();
        	int y = in.nextInt();
        	int z = in.nextInt();
        	
			// 0 0 0 을 입력받으면 종료
        	if(x == 0 && y == 0 && z == 0) break;
            
        	
        	if((x * x + y * y) == z * z) {
				System.out.println("right");
			}
        	else if(x * x == (y * y + z * z)) {
				System.out.println("right");
			}
        	else if(y * y == (z * z + x * x)) {
				System.out.println("right");
			}
        	else {
				System.out.println("wrong");
			}
        	
		}
 
	}
 
}


----------------------------------------------------------------

백준 10870 피보나치수 5

피보나치 수는 0과 1로 시작한다. 0번째 피보나치 수는 0이고, 1번째 피보나치 수는 1이다. 그 다음 2번째 부터는 바로 앞 두 피보나치 수의 합이 된다.
이를 식으로 써보면 Fn = Fn-1 + Fn-2 (n ≥ 2)가 된다. n=17일때 까지 피보나치 수를 써보면 다음과 같다.
0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597
n이 주어졌을 때, n번째 피보나치 수를 구하는 프로그램을 작성하시오.

n=5;


n칸만큼의 int 배열을 생성 arr[] a

[0] [1] [2] [3] [4] // a[4]가 답


a[2] = a[1] + a[0]
a[3] = a[2] + a[1]
a[4] = a[3] + a[2]
a[n-1] = a[n-2] + a[n-3]


int[] a = new int[n]
a[0] = 0;
a[1] = 1;
for(int i = 2; i<n-1; i++){
	a[i] = a[i-1] + a[i-2];
}
	System.out.print(a[n-1]);





import java.io.InputStreaReader;
import java.io.BufferedReader;
import java.io.IOException;

public class Main{

	public static void main(String[] args) throws IOException {

	BufferedReader br = new BufferedReader(new 	InputStreamReader(System.in);
	int n = Integer.parseInt(br.readLine());



2.
import java.io.InputStreamReader;
import java.io.BufferedReader;
import java.io.IOException;

public class Main{
	public static void main(String[] args) throws IOException{
	BufferedReader br = new BufferedReader(new InputStreamReader(System.in);

int a,b,c;
a = Integer.parseInt(br.readLine());
b = Integer.parseInt(br.readLine());
c = Integer.parseInt(br.readLine());


1.
import java.util.Scanner;
public class Main(
	public static void main(String[] args){
	Scanner sc = new Scanner(System.in);
	int a = sc.nextInt();
//--------------------------------------------------------------------
import java.io.InputStreamReader;
import java.io.BufferedReader;
import java.io.IOException;

public class Main{

	public static void main(String[] args) throws IOException {

	BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	int n = Integer.parseInt(br.readLine());

            int[] a = new int[n];
            a[0] = 0;
            a[1] = 1;
            for(int i = 2; i<=n-1; i++){
        	
        	a[i] = a[i-1] + a[i-2];
            }   
	        System.out.print(a[n-1]+a[n-2]);


	}
}
//--------------------------------------------------------------------

백준 2750번 수 정렬하기

//int[] a= new int[n]
//for(int i = 0; i<=n-1; i++){
//a[i] = sc.nextInt();

//배열 값 입력받아서 결정

//첫째 줄에 수의 개수 N(1 ≤ N ≤ 1,000)이 주어진다. 둘째 줄부터 N개의 줄//에는 수 주어진다. 이 수는 절댓값이 1,000보다 작거나 같은 정수이다. 수//는 중복되지 않는다.

public class Main{
	public static void main(String[] args) {
	
	Scanner sc = new Scanner(System.in);

	int N = sc.nextInt(); //처음 입력받을 값의 갯수 설정
	int[] arr1 = new arr1[N];

	for(int i = 0; i < N; i++) {
		arr[i] = sc.nextInt(); //배열안에 쳐넣기
	}
	
	for(int i = 0; i < N - 1; i++) {
		for( int j = i +1; j < N; j++) {
			if(arr[i] > arr[j]) {
				int temp = arr[j];
				arr[j] = arr[i];
				arr[i] = temp;
			//배열 돌리면서 더 큰값찾기
			}
		}
	}

	for(int val : arr) {
		System.out.println(val);
	}
	}
}

// 스캐너 버블정렬

* range loop

It is called range loop.

int arr[] = { 1, 2, 3 };
for (int val : arr)
   cout << val;
works the same as:

int arr[] = { 1, 2, 3 };
for (int i=0;i<sizeof(arr)/sizeof(int);i++)
{
   int val=arr[i];
   cout << val;
}
But range loop can do far more.

It simply means loop through all members. Keep in mind some classes can have a complicated iterator and a range for runs through an array in a clean way. Also, notice it is a c++11 feature.







